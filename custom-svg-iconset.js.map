{"version":3,"file":"custom-svg-iconset.js","sources":["src/custom-svg-iconset.js"],"sourcesContent":["/**\r\n * @extends HTMLElement\r\n */\r\nexport default ((base = HTMLElement) => {\r\n  window.svgIconset = window.svgIconset || {};\r\n\r\n  customElements.define('custom-svg-iconset', class CustomSvgIconset extends base {\r\n    /**\r\n     * Attributes to observe\r\n     *\r\n     * Updates the js prop value with related attribute value\r\n     * @return {array} ['name', 'theme', size]\r\n     */\r\n    static get observedAttributes() {\r\n      return ['name', 'theme', 'size', 'width', 'height'];\r\n    }\r\n    /**\r\n     * Runs whenever inserted into document\r\n     */\r\n    constructor() {\r\n      super();\r\n    }\r\n    connectedCallback() {\r\n      if (!this.hasAttribute('name')) {\r\n        this.name = this.name;\r\n      }\r\n      this.style.display = 'none';\r\n    }\r\n    // Getters\r\n    /**\r\n     * The name of the iconset\r\n     * @default {string} icons\r\n     */\r\n    get name() {\r\n      return this._name || 'icons';\r\n    }\r\n    /**\r\n     * The theme for the iconset\r\n     * @default {string} light\r\n     * @return {string}\r\n     */\r\n    get theme() {\r\n      return this._theme || 'light';\r\n    }\r\n\r\n    get width() {\r\n      return this.getAttribute('width') || 24\r\n    }\r\n\r\n    get height() {\r\n      return this.getAttribute('height') || 24\r\n    }\r\n    /**\r\n     * The size for the icons\r\n     * @default {number} 24\r\n     * @return {number}\r\n     */\r\n    get size() {\r\n      return this._size || { width: this.width, height: this.height };\r\n    }\r\n    // Setters\r\n    /**\r\n     * Creates the iconset[name] in window\r\n     */\r\n    set name(value) {\r\n      if (this._name !== value) {\r\n        this._name = value;\r\n        window.svgIconset[value] = {host: this, theme: this.theme};\r\n        window.dispatchEvent(new CustomEvent('svg-iconset-update'));\r\n        window.dispatchEvent(new CustomEvent('svg-iconset-added', {detail: value}));\r\n      }\r\n    }\r\n    /**\r\n     * Reruns applyIcon whenever a change has been detected\r\n     */\r\n    set theme(value) {\r\n      if (this._theme !== value && this.name) {\r\n        window.svgIconset[this.name] = {host: this, theme: value};\r\n        window.dispatchEvent(new CustomEvent('svg-iconset-update'));\r\n      }\r\n      this._theme = value;\r\n    }\r\n\r\n    set size(value) {\r\n      let width\r\n      let height\r\n      if (!Array.isArray(value)) {\r\n        width = 24\r\n        height = 24\r\n      }\r\n      this._size = {width, height};\r\n\r\n    }\r\n    /**\r\n     * Runs whenever given attribute in observedAttributes has changed\r\n     * @private\r\n     */\r\n    attributeChangedCallback(name, oldVal, newVal) {\r\n      if (oldVal !== newVal) {\r\n        this[name] = newVal;\r\n      }\r\n    }\r\n    /* from https://github.com/PolymerElements/iron-iconset-svg */\r\n    /**\r\n     * Applies an icon to given element\r\n     * @param {HTMLElement} element the element appending the icon to\r\n     * @param {string} icon The name of the icon to show\r\n     */\r\n    applyIcon(element, icon) {\r\n      element = element.shadowRoot || element;\r\n      this.removeIcon(element);\r\n      this._cloneIcon(icon).then(icon => {\r\n        element.insertBefore(icon, element.childNodes[0]);\r\n        element._iconSetIcon = icon\r\n      });\r\n    }\r\n    /**\r\n     * Remove an icon from the given element by undoing the changes effected\r\n     * by `applyIcon`.\r\n     *\r\n     * @param {Element} element The element from which the icon is removed.\r\n     */\r\n    removeIcon(element) {\r\n      // Remove old svg element\r\n      element = element.shadowRoot || element;\r\n      if (element._iconSetIcon) {\r\n        element.removeChild(element._iconSetIcon);\r\n        element._iconSetIcon = null;\r\n      }\r\n    }\r\n    /**\r\n     * Produce installable clone of the SVG element matching `id` in this\r\n     * iconset, or `undefined` if there is no matching element.\r\n     *\r\n     * @return {Element} Returns an installable clone of the SVG element\r\n     * matching `id`.\r\n     * @private\r\n     */\r\n    _cloneIcon(id) {\r\n      return new Promise((resolve, reject) => {\r\n        // create the icon map on-demand, since the iconset itself has no discrete\r\n        // signal to know when it's children are fully parsed\r\n        try {\r\n          this._icons = this._icons || this._createIconMap();\r\n          let svgClone = this._prepareSvgClone(this._icons[id], this.size);\r\n          resolve(svgClone);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      });\r\n    }\r\n    // TODO: Update icon-map on child changes\r\n    /**\r\n     * Create a map of child SVG elements by id.\r\n     *\r\n     * @return {!Object} Map of id's to SVG elements.\r\n     * @private\r\n     */\r\n    _createIconMap() {\r\n      var icons = Object.create(null);\r\n      this.querySelectorAll('[id]')\r\n        .forEach(icon => {\r\n          icons[icon.id] = icon;\r\n        });\r\n      return icons;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _prepareSvgClone(sourceSvg, {width, height}) {\r\n      if (sourceSvg) {\r\n        var content = sourceSvg.cloneNode(true),\r\n            svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),\r\n            viewBox = content.getAttribute('viewBox') || '0 0 ' + width + ' ' + height,\r\n            cssText = 'pointer-events: none; display: block; width: 100%; height: 100%;';\r\n        svg.setAttribute('viewBox', viewBox);\r\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n        svg.style.cssText = cssText;\r\n        svg.appendChild(content).removeAttribute('id');\r\n        return svg;\r\n      }\r\n      return null;\r\n    }\r\n  })\r\n})()\r\n"],"names":["base","HTMLElement","svgIconset","window","define","CustomSvgIconset","observedAttributes","hasAttribute","name","style","display","_name","theme","_theme","width","getAttribute","height","size","_size","value","host","dispatchEvent","CustomEvent","detail","Array","isArray","oldVal","newVal","element","icon","shadowRoot","removeIcon","_cloneIcon","then","insertBefore","childNodes","_iconSetIcon","removeChild","id","Promise","resolve","reject","_icons","_createIconMap","svgClone","_prepareSvgClone","error","icons","Object","create","querySelectorAll","forEach","sourceSvg","content","cloneNode","svg","document","createElementNS","viewBox","cssText","setAttribute","appendChild","removeAttribute"],"mappings":"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"}